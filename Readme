As a part of GSOC programme i worked on a project “Enhancing Boost Intrusive Library” with Boost C++ Libraries.

Enhancing Boost Intrusive library
Intrusive library contains all the data structures like list ,vector ,avl tree ,map etc.This project is further extending the Intrusive library by implementing advanced data structures.The following data structures have been implemented as a part of this project.They are:-

Segment tree
Fenwick tree
Suffix tree
Suffix automata
Also implemented 2 other algorithms which are very important in solving graph based problems.They are:-

Heavy light decomposition
Centroid decomposition
These data structures and algorithms have lot of applications like interval updates for segment tree or fenwick tree ,many string applications for suffix tree and suffix automata like longest substring etc.

The link for the code implemented is :-

https://github.com/BoostGSoC18/Advanced-Intrusive

The link for the documentation is :-

https://harisaicharan.github.io/

My experience with organisation and mentor:-
I am already familiar with some of the things implemented during GSOC but implementing them gave me better clarity and this is my first open source experience. I like the way GSOC programme has been structured, dividing work into 3 parts and giving students 1 month gap for each part where student is given full freedom to explore and implement code.Then students come up with lot of new ideas into projects which can help the organisation. I had a very good experience with boost c++ libraries as i was having no pressure from the organisation during any part of the process.My mentor helped me many times when ever i was stuck during the process.He gave me many references which helped me to complete the project fastly on time.I want to thank him for helping me when ever i needed.

Challenges faced:-
The major problem was understanding the existing code base, this is very essential for my project as the implementation of all the data structures has to be consistent otherwise it becomes very difficult for people who wants to improve the library.This was only during first few days of process.During GSOC project the difficult and also interesting part is thinking about the implementation which is optimised with respect to both space and time requirements.I tried my best taking ideas from mentor in optimising the implementation.

Contents of the directory:-
The github link given contains Documentation, Tests, Code and also demo files which show how to use the library, each in their respective directories.The directory names in repository are self-explanatory.

Use c++14 for the segment tree library.

Usage:-

How to run unit test files ?

	g++ Iterator_test.cpp -std=c++14
	g++ Build_test.cpp -std=c++14
	g++ Update_test.cpp -std=c++14


Functions Implemented:

1) seg_build:

This function builds the segment tree given the input array and the merging function.

Inputs:

(start_index , end_index , input_array , total_size,merging_function)

start_index: the starting index of input_array from where the segment_tree needs to be built

end_index: the starting index of input_array from where the segment_tree needs to be built

input_array: The array on which segment_tree needs to be built

size: The total declared size of input_array

merging_function : the function that is used for merging between the parent node and children nodes.

Output:

It gives a tree with leaf nodes containing the elements of input array.

2) segtree_update:

This function updates the segment tree if there is an update at a single position in the input_array.

Inputs:

(start_index , end_index ,index ,input_array ,merging_function)

start_index: the starting index of input_array from where the segment_tree was built previously using built function

end_index: the starting index of input_array till where the segment_tree was built previously using built function

index: The updated index in the input_array.

input_array: The array on which segment_tree needs to be built

merging_function : the function that is used for merging between the parent node and children nodes.


3) segtree_query:

This function takes an interval as input and outputs the value given by the merging function.

Inputs:

(start_index , end_index ,query_start,query_end,initialiser,input_array ,merging_function)

start_index: the starting index of input_array from where the segment_tree was built previously using built function

end_index: the starting index of input_array till where the segment_tree was built previously using built function

query_start:The starting index of query.

query_end:The ending index of query.

initialiser: This is the value that will not effect the value that merging_function outputs

input_array: The array on which segment_tree needs to be built

merging_function : the function that is used for merging between the parent node and children nodes.

Output:

The value of merging function on the input interval.


4) begin:

This function returns a pointer which points to the first node of segment tree i.e root.

Inputs:

This has no inputs.

Output:

Returns the pointer that points to the root of segment tree.


5) get_parent:

This function returns a pointer which points to the parent of the input iterator.

Inputs:

(Iterator)

Output:

Returns an iterator to the parent.

6) get_left_child:

This function returns a pointer which points to the left child of the input iterator.

Inputs:

(Iterator)

Output:

Returns an iterator to the left child.


7) get_right_child:

This function returns a pointer which points to the right child of the input iterator.

Inputs:

(Iterator)

Output:

Returns an iterator to the right child.







